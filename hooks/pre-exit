#!/bin/bash
set -euo pipefail

TOKEN_ENV_NAME="${BUILDKITE_PLUGIN_TEST_COLLECTOR_API_TOKEN_ENV_NAME:-BUILDKITE_ANALYTICS_TOKEN}"
FORMAT="${BUILDKITE_PLUGIN_TEST_COLLECTOR_FORMAT:-}"
TIMEOUT="${BUILDKITE_PLUGIN_TEST_COLLECTOR_TIMEOUT:-30}"
BASE_PATH="${BUILDKITE_PLUGIN_TEST_COLLECTOR_BASE_PATH:-.}"
ANNOTATE="${BUILDKITE_PLUGIN_TEST_COLLECTOR_ANNOTATE_REPORT:-false}"
REPORT_URLS_FILE=$(mktemp)
CURL_RESP_FILE="${CURL_RESP_FILE:-response.json}"
DEBUG="false"

if [[ "${BUILDKITE_PLUGIN_TEST_COLLECTOR_DEBUG:-}" =~ ^(true|on|1|always)$ ]]; then
  DEBUG="true"
elif [[ "${BUILDKITE_ANALYTICS_DEBUG_ENABLED:-}" =~ ^(true|on|1|always)$ ]]; then
  DEBUG="true"
fi

if [[ -n "${BUILDKITE_PLUGIN_TEST_COLLECTOR_BRANCHES:-}" ]]; then
  if [[ ! "${BUILDKITE_BRANCH}" =~ ${BUILDKITE_PLUGIN_TEST_COLLECTOR_BRANCHES} ]]; then
    echo "Branch ${BUILDKITE_BRANCH} does not match selector ${BUILDKITE_PLUGIN_TEST_COLLECTOR_BRANCHES}. Skipping it."
    exit 0
  fi
fi

if [[ -n "${BUILDKITE_PLUGIN_TEST_COLLECTOR_EXCLUDE_BRANCHES:-}" ]]; then
  if [[ "${BUILDKITE_BRANCH}" =~ ${BUILDKITE_PLUGIN_TEST_COLLECTOR_EXCLUDE_BRANCHES} ]]; then
    echo "Branch ${BUILDKITE_BRANCH} matches exclude selector ${BUILDKITE_PLUGIN_TEST_COLLECTOR_EXCLUDE_BRANCHES}. Skipping it."
    exit 0
  fi
fi

TOKEN_VALUE="${!TOKEN_ENV_NAME:-}"
PLUGIN_VERSION=$(git rev-parse --short HEAD 2>/dev/null || echo "")

if [[ -z "${TOKEN_VALUE}" ]]; then
  echo "Missing $TOKEN_ENV_NAME environment variable"
  exit 1
fi

if [[ -z "${FORMAT}" ]]; then
  echo "Missing file format 'format'. Possible values: 'junit', 'json'"
  exit 1
fi

# Creates the annotations with all the report URLs
annotate-report() {
  [ "${ANNOTATE}" != "true" ] && return
  local json_file="$1"
  mapfile -t REPORT_URLS < <(sort "${json_file}" | uniq)

  local REPORTS=""
  REPORT_COUNT=1
  for URL in "${!REPORT_URLS[@]}"; do
    REPORTS+="- [Report #${REPORT_COUNT}](${URL})\n"
    REPORT_COUNT=$((REPORT_COUNT + 1))
  done

  buildkite-agent annotate --style info --context "test-collector" "Check the test report(s) here: \n\n${REPORTS}"
}

# Saves the build with the report URL
save-report-url() {
  [ "${ANNOTATE}" != "true" ] && return
  
  local json_file="$1"
  local report_url

  if [[ ! -f "${json_file}" ]]; then
    echo "Failed to upload test results from $json_file. File not found."
    return
  fi
  # Could be easier with jq, but we don't want to require it
  if command -v jq >/dev/null; then
     report_url=$(jq -r '.run_url' "${json_file}")
  else
     report_url=$(sed 's/.*"run_url" *: *"\([^"]*\)".*/\1/g' "${json_file}")
  fi

  if [[ "$report_url" == "" ]]; then
    echo "Failed to upload test results from $json_file"
    return
  fi

  echo "Saving test report URL to $REPORT_URLS_FILE"
  echo "$report_url" > "$REPORT_URLS_FILE"
}

# Uploads files to the Test Analytics API
#
# Upload failures should not fail the build, and should have a sensible timeout,
# so that Test Analytics availability doesn't affect build reliability.
upload() {
  local file="$3"
  local format="$2"

  local curl_args=(
    "-X" "POST"
    "--silent"
    "--show-error"
    "--max-time" "${TIMEOUT}"
    "--form" "format=${format}"
    "--form" "data=@\"$file\""
    "--form" "run_env[CI]=buildkite"
    "--form" "run_env[key]=$BUILDKITE_BUILD_ID"
    "--form" "run_env[url]=$BUILDKITE_BUILD_URL"
    "--form" "run_env[branch]=$BUILDKITE_BRANCH"
    "--form" "run_env[commit_sha]=$BUILDKITE_COMMIT"
    "--form" "run_env[number]=$BUILDKITE_BUILD_NUMBER"
    "--form" "run_env[job_id]=$BUILDKITE_JOB_ID"
    "--form" "run_env[message]=$BUILDKITE_MESSAGE"
    "--form" "run_env[collector]=test-collector-buildkite-plugin"
  )

  if [[ "$DEBUG" == "true" ]]; then
    curl_args+=("--form" "run_env[debug]=$DEBUG")
  fi

  if [[ -n "$PLUGIN_VERSION" ]]; then
    curl_args+=("--form" "run_env[version]=$PLUGIN_VERSION")
  fi

  curl_args+=("${BUILDKITE_PLUGIN_TEST_COLLECTOR_API_URL:-https://analytics-api.buildkite.com/v1/uploads}" "-o" "${CURL_RESP_FILE}")

  # Print debugging output before we add the token, so it doesn't ever get
  # printed to output
  if [[ "$DEBUG" == "true" ]]; then
    echo curl "${curl_args[@]}"
  fi

  curl_args+=("-H" "Authorization: Token token=\"$TOKEN_VALUE\"")

  curl "${curl_args[@]}"
}

# Runs the whole plugin logic for a particular find pattern
find_and_upload() {
  FILES_PATTERN="$1"
  FIND_CMD=(find)

  if [[ "${BUILDKITE_PLUGIN_TEST_COLLECTOR_FOLLOW_SYMLINKS:-}" =~ ^(true|on|1|always)$ ]]; then
    FIND_CMD+=('-L')
  fi

  matching_files=()
  while IFS=$'' read -r matching_file ; do
    matching_files+=("$matching_file")
  done < <("${FIND_CMD[@]}" "${BASE_PATH}" -path "${BASE_PATH}/${FILES_PATTERN}")

  if [[ "${#matching_files[@]}" -eq "0" ]]; then
    echo "No files found matching '${FILES_PATTERN}'"
    if [[ "${BUILDKITE_COMMAND_EXIT_STATUS:-0}" -eq "0" ]]; then
      exit 1
    fi
  else
    # needs to be part of else for bash4.3 compatibility
    for file in "${matching_files[@]}"; do
      echo "Uploading '$file'..."
      if ! upload "$TOKEN_VALUE" "$FORMAT" "${file}"; then
        echo "Error uploading, will continue"
      fi
      save-report-url "${CURL_RESP_FILE}"
    done
  fi
}

if [ -n "${BUILDKITE_PLUGIN_TEST_COLLECTOR_FILES:-}" ]; then
  find_and_upload "${BUILDKITE_PLUGIN_TEST_COLLECTOR_FILES}"
  annotate-report "${REPORT_URLS_FILE}"
elif [ -n "${BUILDKITE_PLUGIN_TEST_COLLECTOR_FILES_0:-}" ]; then
  prefix="BUILDKITE_PLUGIN_TEST_COLLECTOR_FILES"
  parameter="${prefix}_0"

  if [ -n "${!parameter:-}" ]; then
    i=0
    parameter="${prefix}_${i}"
    while [ -n "${!parameter:-}" ]; do
      find_and_upload "${!parameter}"
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
    annotate-report "${REPORT_URLS_FILE}"
  fi
else
  echo "Missing file upload pattern 'files', e.g. 'junit-*.xml'"
  exit 1
fi